======= LOG CREATED on 周六 2023/4月/15 23:37:08:470 =======

PROGEX (Program Graph Extractor)  [ v3.4.5 ]
Visit project website @ https://github.com/ghaffarian/progex

PROGEX execution config:
  Language = Cpp
  Output format = JSON
  Output directory = ../generate/cpp/basic/AST/\
  Analysis types = [AST]
  File name = 
  Input paths = 
        src/test/resources/cpp/basic/


# Cpp source files = 7


Abstract Syntax Analysis
========================
AST exported to: ../generate/cpp/basic/AST/\and_keyword-AST.json
{
  "directed": true,  "label": "AST of and_keyword.cpp",  "type": "Abstract Syntax Tree (AST)",  "file": "and_keyword.cpp",
  "nodes": [    {      "id": 0,      "line": 0,      "type": "ROOT",      "label": "and_keyword.cpp",      "normalized": "and_keyword.cpp"    },    {      "id": 1,      "line": 3,      "type": "USING",      "label": "using namespace std;",      "normalized": "using namespace std;"    },    {      "id": 2,      "line": 5,      "type": "FUNCTION",      "label": "FUNCTION",      "normalized": "FUNCTION"    },    {      "id": 3,      "line": 5,      "type": "RETURN",      "label": "int ",      "normalized": "int "    },    {      "id": 4,      "line": 5,      "type": "NAME",      "label": "main",      "normalized": "$METHOD_main"    },    {      "id": 5,      "line": 5,      "type": "BLOCK",      "label": "BLOCK",      "normalized": "BLOCK"    },    {      "id": 6,      "line": 7,      "type": "IF",      "label": "IF",      "normalized": "IF"    },    {      "id": 7,      "line": 7,      "type": "COND",      "label": "true && true",      "normalized": "true&&true"    },    {      "id": 8,      "line": 7,      "type": "THEN",      "label": "THEN",      "normalized": "THEN"    },    {      "id": 9,      "line": 8,      "type": "",      "label": "cout << 'Hello World!';",      "normalized": "cout<<'Hello World!'"    },    {      "id": 10,      "line": 10,      "type": "",      "label": "return 0;",      "normalized": "return0;"    }  ],

  "edges": [    {      "id": 0,      "source": 0,      "target": 1,      "label": ""    },    {      "id": 1,      "source": 0,      "target": 2,      "label": ""    },    {      "id": 2,      "source": 2,      "target": 3,      "label": ""    },    {      "id": 3,      "source": 2,      "target": 4,      "label": ""    },    {      "id": 4,      "source": 2,      "target": 5,      "label": ""    },    {      "id": 5,      "source": 5,      "target": 6,      "label": ""    },    {      "id": 6,      "source": 6,      "target": 7,      "label": ""    },    {      "id": 7,      "source": 6,      "target": 8,      "label": ""    },    {      "id": 8,      "source": 8,      "target": 9,      "label": ""    },    {      "id": 9,      "source": 5,      "target": 10,      "label": ""    }  ]
}
AST exported to: ../generate/cpp/basic/AST/\function_definitions_and_integers-AST.json
{
  "directed": true,  "label": "AST of function_definitions_and_integers.cpp",  "type": "Abstract Syntax Tree (AST)",  "file": "function_definitions_and_integers.cpp",
  "nodes": [    {      "id": 0,      "line": 0,      "type": "ROOT",      "label": "function_definitions_and_integers.cpp",      "normalized": "function_definitions_and_integers.cpp"    },    {      "id": 1,      "line": 1,      "type": "FUNCTION",      "label": "FUNCTION",      "normalized": "FUNCTION"    },    {      "id": 2,      "line": 1,      "type": "RETURN",      "label": "int ",      "normalized": "int "    },    {      "id": 3,      "line": 1,      "type": "NAME",      "label": "foo",      "normalized": "foo"    },    {      "id": 4,      "line": 2,      "type": "PARAMS",      "label": "PARAMS",      "normalized": "PARAMS"    },    {      "id": 5,      "line": 2,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 6,      "line": 2,      "type": "TYPE",      "label": "short ",      "normalized": "short "    },    {      "id": 7,      "line": 2,      "type": "NAME",      "label": "s",      "normalized": "s"    },    {      "id": 8,      "line": 2,      "type": "FUNCTION",      "label": "FUNCTION",      "normalized": "FUNCTION"    },    {      "id": 9,      "line": 2,      "type": "RETURN",      "label": "float ",      "normalized": "float "    },    {      "id": 10,      "line": 2,      "type": "NAME",      "label": "foo",      "normalized": "foo"    },    {      "id": 11,      "line": 3,      "type": "PARAMS",      "label": "PARAMS",      "normalized": "PARAMS"    },    {      "id": 12,      "line": 3,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 13,      "line": 3,      "type": "TYPE",      "label": "short int ",      "normalized": "short int "    },    {      "id": 14,      "line": 3,      "type": "NAME",      "label": "si",      "normalized": "si"    },    {      "id": 15,      "line": 3,      "type": "INIT",      "label": "1",      "normalized": "1"    },    {      "id": 16,      "line": 3,      "type": "FUNCTION",      "label": "FUNCTION",      "normalized": "FUNCTION"    },    {      "id": 17,      "line": 3,      "type": "RETURN",      "label": "int ",      "normalized": "int "    },    {      "id": 18,      "line": 3,      "type": "NAME",      "label": "foo",      "normalized": "foo"    }  ],

  "edges": [    {      "id": 0,      "source": 0,      "target": 1,      "label": ""    },    {      "id": 1,      "source": 1,      "target": 2,      "label": ""    },    {      "id": 2,      "source": 1,      "target": 3,      "label": ""    },    {      "id": 3,      "source": 4,      "target": 5,      "label": ""    },    {      "id": 4,      "source": 5,      "target": 6,      "label": ""    },    {      "id": 5,      "source": 5,      "target": 7,      "label": ""    },    {      "id": 6,      "source": 0,      "target": 8,      "label": ""    },    {      "id": 7,      "source": 8,      "target": 9,      "label": ""    },    {      "id": 8,      "source": 8,      "target": 10,      "label": ""    },    {      "id": 9,      "source": 8,      "target": 4,      "label": ""    },    {      "id": 10,      "source": 11,      "target": 12,      "label": ""    },    {      "id": 11,      "source": 12,      "target": 13,      "label": ""    },    {      "id": 12,      "source": 12,      "target": 14,      "label": ""    },    {      "id": 13,      "source": 12,      "target": 15,      "label": ""    },    {      "id": 14,      "source": 0,      "target": 16,      "label": ""    },    {      "id": 15,      "source": 16,      "target": 17,      "label": ""    },    {      "id": 16,      "source": 16,      "target": 18,      "label": ""    },    {      "id": 17,      "source": 16,      "target": 11,      "label": ""    }  ]
}
AST exported to: ../generate/cpp/basic/AST/\iteration_test-AST.json
{
  "directed": true,  "label": "AST of iteration_test.cpp",  "type": "Abstract Syntax Tree (AST)",  "file": "iteration_test.cpp",
  "nodes": [    {      "id": 0,      "line": 0,      "type": "ROOT",      "label": "iteration_test.cpp",      "normalized": "iteration_test.cpp"    },    {      "id": 1,      "line": 1,      "type": "FUNCTION",      "label": "FUNCTION",      "normalized": "FUNCTION"    },    {      "id": 2,      "line": 1,      "type": "RETURN",      "label": "int ",      "normalized": "int "    },    {      "id": 3,      "line": 1,      "type": "NAME",      "label": "main",      "normalized": "$METHOD_main"    },    {      "id": 4,      "line": 1,      "type": "BLOCK",      "label": "BLOCK",      "normalized": "BLOCK"    },    {      "id": 5,      "line": 3,      "type": "WHILE",      "label": "WHILE",      "normalized": "WHILE"    },    {      "id": 6,      "line": 3,      "type": "COND",      "label": "(true && false) || true",      "normalized": "(true&&false)||true"    },    {      "id": 7,      "line": 7,      "type": "FOR",      "label": "FOR",      "normalized": "FOR"    },    {      "id": 8,      "line": 7,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 9,      "line": 7,      "type": "TYPE",      "label": "int ",      "normalized": "int "    },    {      "id": 10,      "line": 7,      "type": "NAME",      "label": "NAME",      "normalized": "&VARL_1"    },    {      "id": 11,      "line": 7,      "type": "INIT",      "label": "=1",      "normalized": "=1"    },    {      "id": 12,      "line": 7,      "type": "COND",      "label": "i<9",      "normalized": "i<9"    },    {      "id": 13,      "line": 7,      "type": "EXPRESSION",      "label": "++i",      "normalized": "++i"    },    {      "id": 14,      "line": 9,      "type": "",      "label": "continue;",      "normalized": "continue;"    }  ],

  "edges": [    {      "id": 0,      "source": 0,      "target": 1,      "label": ""    },    {      "id": 1,      "source": 1,      "target": 2,      "label": ""    },    {      "id": 2,      "source": 1,      "target": 3,      "label": ""    },    {      "id": 3,      "source": 1,      "target": 4,      "label": ""    },    {      "id": 4,      "source": 4,      "target": 5,      "label": ""    },    {      "id": 5,      "source": 5,      "target": 6,      "label": ""    },    {      "id": 6,      "source": 4,      "target": 7,      "label": ""    },    {      "id": 7,      "source": 7,      "target": 8,      "label": ""    },    {      "id": 8,      "source": 8,      "target": 9,      "label": ""    },    {      "id": 9,      "source": 8,      "target": 10,      "label": ""    },    {      "id": 10,      "source": 8,      "target": 11,      "label": ""    },    {      "id": 11,      "source": 7,      "target": 12,      "label": ""    },    {      "id": 12,      "source": 7,      "target": 13,      "label": ""    },    {      "id": 13,      "source": 7,      "target": 14,      "label": ""    }  ]
}
AST exported to: ../generate/cpp/basic/AST/\macro-AST.json
{
  "directed": true,  "label": "AST of macro.cpp",  "type": "Abstract Syntax Tree (AST)",  "file": "macro.cpp",
  "nodes": [    {      "id": 0,      "line": 0,      "type": "ROOT",      "label": "macro.cpp",      "normalized": "macro.cpp"    },    {      "id": 1,      "line": 10,      "type": "FUNCTION",      "label": "FUNCTION",      "normalized": "FUNCTION"    },    {      "id": 2,      "line": 10,      "type": "RETURN",      "label": "void ",      "normalized": "void "    },    {      "id": 3,      "line": 10,      "type": "NAME",      "label": "f",      "normalized": "$METHOD_f"    },    {      "id": 4,      "line": 10,      "type": "BLOCK",      "label": "BLOCK",      "normalized": "BLOCK"    },    {      "id": 5,      "line": 11,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 6,      "line": 11,      "type": "TYPE",      "label": "int ",      "normalized": "int "    },    {      "id": 7,      "line": 11,      "type": "NAME",      "label": "NAME",      "normalized": "&VARL_1"    },    {      "id": 8,      "line": 11,      "type": "INIT",      "label": "= 0",      "normalized": "= 0"    }  ],

  "edges": [    {      "id": 0,      "source": 0,      "target": 1,      "label": ""    },    {      "id": 1,      "source": 1,      "target": 2,      "label": ""    },    {      "id": 2,      "source": 1,      "target": 3,      "label": ""    },    {      "id": 3,      "source": 1,      "target": 4,      "label": ""    },    {      "id": 4,      "source": 4,      "target": 5,      "label": ""    },    {      "id": 5,      "source": 5,      "target": 6,      "label": ""    },    {      "id": 6,      "source": 5,      "target": 7,      "label": ""    },    {      "id": 7,      "source": 5,      "target": 8,      "label": ""    }  ]
}
AST exported to: ../generate/cpp/basic/AST/\or_keyword-AST.json
{
  "directed": true,  "label": "AST of or_keyword.cpp",  "type": "Abstract Syntax Tree (AST)",  "file": "or_keyword.cpp",
  "nodes": [    {      "id": 0,      "line": 0,      "type": "ROOT",      "label": "or_keyword.cpp",      "normalized": "or_keyword.cpp"    },    {      "id": 1,      "line": 3,      "type": "USING",      "label": "using namespace std;",      "normalized": "using namespace std;"    },    {      "id": 2,      "line": 5,      "type": "FUNCTION",      "label": "FUNCTION",      "normalized": "FUNCTION"    },    {      "id": 3,      "line": 5,      "type": "RETURN",      "label": "int ",      "normalized": "int "    },    {      "id": 4,      "line": 5,      "type": "NAME",      "label": "main",      "normalized": "$METHOD_main"    },    {      "id": 5,      "line": 5,      "type": "BLOCK",      "label": "BLOCK",      "normalized": "BLOCK"    },    {      "id": 6,      "line": 7,      "type": "IF",      "label": "IF",      "normalized": "IF"    },    {      "id": 7,      "line": 7,      "type": "COND",      "label": "false || true",      "normalized": "false||true"    },    {      "id": 8,      "line": 7,      "type": "THEN",      "label": "THEN",      "normalized": "THEN"    },    {      "id": 9,      "line": 8,      "type": "",      "label": "cout << 'Hello World!';",      "normalized": "cout<<'Hello World!'"    },    {      "id": 10,      "line": 10,      "type": "",      "label": "return 0;",      "normalized": "return0;"    }  ],

  "edges": [    {      "id": 0,      "source": 0,      "target": 1,      "label": ""    },    {      "id": 1,      "source": 0,      "target": 2,      "label": ""    },    {      "id": 2,      "source": 2,      "target": 3,      "label": ""    },    {      "id": 3,      "source": 2,      "target": 4,      "label": ""    },    {      "id": 4,      "source": 2,      "target": 5,      "label": ""    },    {      "id": 5,      "source": 5,      "target": 6,      "label": ""    },    {      "id": 6,      "source": 6,      "target": 7,      "label": ""    },    {      "id": 7,      "source": 6,      "target": 8,      "label": ""    },    {      "id": 8,      "source": 8,      "target": 9,      "label": ""    },    {      "id": 9,      "source": 5,      "target": 10,      "label": ""    }  ]
}
AST exported to: ../generate/cpp/basic/AST/\template_args_test-AST.json
{
  "directed": true,  "label": "AST of template_args_test.cpp",  "type": "Abstract Syntax Tree (AST)",  "file": "template_args_test.cpp",
  "nodes": [    {      "id": 0,      "line": 0,      "type": "ROOT",      "label": "template_args_test.cpp",      "normalized": "template_args_test.cpp"    },    {      "id": 1,      "line": 1,      "type": "FUNCTION",      "label": "FUNCTION",      "normalized": "FUNCTION"    },    {      "id": 2,      "line": 1,      "type": "RETURN",      "label": "void ",      "normalized": "void "    },    {      "id": 3,      "line": 1,      "type": "NAME",      "label": "TemplateArgsTest",      "normalized": "$METHOD_TemplateArgsTest"    },    {      "id": 4,      "line": 1,      "type": "PARAMS",      "label": "vector<ClassA> args, vector <ClassB> args2",      "normalized": "vector<ClassA> args, vector <ClassB> args2"    },    {      "id": 5,      "line": 1,      "type": "BLOCK",      "label": "BLOCK",      "normalized": "BLOCK"    }  ],

  "edges": [    {      "id": 0,      "source": 0,      "target": 1,      "label": ""    },    {      "id": 1,      "source": 1,      "target": 2,      "label": ""    },    {      "id": 2,      "source": 1,      "target": 3,      "label": ""    },    {      "id": 3,      "source": 1,      "target": 4,      "label": ""    },    {      "id": 4,      "source": 1,      "target": 5,      "label": ""    }  ]
}
AST exported to: ../generate/cpp/basic/AST/\test1-AST.json
{
  "directed": true,  "label": "AST of test1.cpp",  "type": "Abstract Syntax Tree (AST)",  "file": "test1.cpp",
  "nodes": [    {      "id": 0,      "line": 0,      "type": "ROOT",      "label": "test1.cpp",      "normalized": "test1.cpp"    },    {      "id": 1,      "line": 6,      "type": "USING",      "label": "using namespace std;",      "normalized": "using namespace std;"    },    {      "id": 2,      "line": 7,      "type": "FUNCTION",      "label": "FUNCTION",      "normalized": "FUNCTION"    },    {      "id": 3,      "line": 7,      "type": "RETURN",      "label": "int ",      "normalized": "int "    },    {      "id": 4,      "line": 7,      "type": "NAME",      "label": "main",      "normalized": "$METHOD_main"    },    {      "id": 5,      "line": 7,      "type": "BLOCK",      "label": "BLOCK",      "normalized": "BLOCK"    },    {      "id": 6,      "line": 9,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 7,      "line": 9,      "type": "TYPE",      "label": "int ",      "normalized": "int "    },    {      "id": 8,      "line": 9,      "type": "NAME",      "label": "NAME",      "normalized": "&VARL_1"    },    {      "id": 9,      "line": 9,      "type": "INIT",      "label": "= 0",      "normalized": "= 0"    },    {      "id": 10,      "line": 10,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 11,      "line": 10,      "type": "TYPE",      "label": "int ",      "normalized": "int "    },    {      "id": 12,      "line": 10,      "type": "NAME",      "label": "NAME",      "normalized": "&VARL_2"    },    {      "id": 13,      "line": 10,      "type": "INIT",      "label": "= 1",      "normalized": "= 1"    },    {      "id": 14,      "line": 11,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 15,      "line": 11,      "type": "TYPE",      "label": "int &const",      "normalized": "int &const"    },    {      "id": 16,      "line": 11,      "type": "NAME",      "label": "NAME",      "normalized": "&VARL_3"    },    {      "id": 17,      "line": 11,      "type": "INIT",      "label": "= i",      "normalized": "= i"    },    {      "id": 18,      "line": 12,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 19,      "line": 12,      "type": "TYPE",      "label": "int &const",      "normalized": "int &const"    },    {      "id": 20,      "line": 12,      "type": "NAME",      "label": "NAME",      "normalized": "&VARL_4"    },    {      "id": 21,      "line": 12,      "type": "INIT",      "label": "= i",      "normalized": "= i"    },    {      "id": 22,      "line": 13,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 23,      "line": 13,      "type": "TYPE",      "label": "int &const",      "normalized": "int &const"    },    {      "id": 24,      "line": 13,      "type": "NAME",      "label": "NAME",      "normalized": "&VARL_5"    },    {      "id": 25,      "line": 13,      "type": "INIT",      "label": "= i",      "normalized": "= i"    },    {      "id": 26,      "line": 14,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 27,      "line": 14,      "type": "TYPE",      "label": "int &const",      "normalized": "int &const"    },    {      "id": 28,      "line": 14,      "type": "NAME",      "label": "NAME",      "normalized": "&VARL_6"    },    {      "id": 29,      "line": 14,      "type": "INIT",      "label": "= i",      "normalized": "= i"    },    {      "id": 30,      "line": 15,      "type": "",      "label": "icr = y",      "normalized": "&VARL_6=y"    },    {      "id": 31,      "line": 16,      "type": "",      "label": "icr = 99",      "normalized": "&VARL_6=99"    },    {      "id": 32,      "line": 17,      "type": "VAR",      "label": "VAR",      "normalized": "VAR"    },    {      "id": 33,      "line": 17,      "type": "TYPE",      "label": "int ",      "normalized": "int "    },    {      "id": 34,      "line": 17,      "type": "NAME",      "label": "NAME",      "normalized": "&VARL_7"    },    {      "id": 35,      "line": 17,      "type": "INIT",      "label": "= 9",      "normalized": "= 9"    },    {      "id": 36,      "line": 18,      "type": "",      "label": "icr = x",      "normalized": "&VARL_7=x"    },    {      "id": 37,      "line": 19,      "type": "",      "label": "cout << 'icr: ' << icr << ', y:' << y << endl;",      "normalized": "cout<<'icr: '<<icr<<', y:'<<y<<endl"    },    {      "id": 38,      "line": 22,      "type": "",      "label": "_getch()",      "normalized": "_getch()"    },    {      "id": 39,      "line": 23,      "type": "",      "label": "return 0;",      "normalized": "return0;"    }  ],

  "edges": [    {      "id": 0,      "source": 0,      "target": 1,      "label": ""    },    {      "id": 1,      "source": 0,      "target": 2,      "label": ""    },    {      "id": 2,      "source": 2,      "target": 3,      "label": ""    },    {      "id": 3,      "source": 2,      "target": 4,      "label": ""    },    {      "id": 4,      "source": 2,      "target": 5,      "label": ""    },    {      "id": 5,      "source": 5,      "target": 6,      "label": ""    },    {      "id": 6,      "source": 6,      "target": 7,      "label": ""    },    {      "id": 7,      "source": 6,      "target": 8,      "label": ""    },    {      "id": 8,      "source": 6,      "target": 9,      "label": ""    },    {      "id": 9,      "source": 5,      "target": 10,      "label": ""    },    {      "id": 10,      "source": 10,      "target": 11,      "label": ""    },    {      "id": 11,      "source": 10,      "target": 12,      "label": ""    },    {      "id": 12,      "source": 10,      "target": 13,      "label": ""    },    {      "id": 13,      "source": 5,      "target": 14,      "label": ""    },    {      "id": 14,      "source": 14,      "target": 15,      "label": ""    },    {      "id": 15,      "source": 14,      "target": 16,      "label": ""    },    {      "id": 16,      "source": 14,      "target": 17,      "label": ""    },    {      "id": 17,      "source": 5,      "target": 18,      "label": ""    },    {      "id": 18,      "source": 18,      "target": 19,      "label": ""    },    {      "id": 19,      "source": 18,      "target": 20,      "label": ""    },    {      "id": 20,      "source": 18,      "target": 21,      "label": ""    },    {      "id": 21,      "source": 5,      "target": 22,      "label": ""    },    {      "id": 22,      "source": 22,      "target": 23,      "label": ""    },    {      "id": 23,      "source": 22,      "target": 24,      "label": ""    },    {      "id": 24,      "source": 22,      "target": 25,      "label": ""    },    {      "id": 25,      "source": 5,      "target": 26,      "label": ""    },    {      "id": 26,      "source": 26,      "target": 27,      "label": ""    },    {      "id": 27,      "source": 26,      "target": 28,      "label": ""    },    {      "id": 28,      "source": 26,      "target": 29,      "label": ""    },    {      "id": 29,      "source": 5,      "target": 30,      "label": ""    },    {      "id": 30,      "source": 5,      "target": 31,      "label": ""    },    {      "id": 31,      "source": 5,      "target": 32,      "label": ""    },    {      "id": 32,      "source": 32,      "target": 33,      "label": ""    },    {      "id": 33,      "source": 32,      "target": 34,      "label": ""    },    {      "id": 34,      "source": 32,      "target": 35,      "label": ""    },    {      "id": 35,      "source": 5,      "target": 36,      "label": ""    },    {      "id": 36,      "source": 5,      "target": 37,      "label": ""    },    {      "id": 37,      "source": 5,      "target": 38,      "label": ""    },    {      "id": 38,      "source": 5,      "target": 39,      "label": ""    }  ]
}
